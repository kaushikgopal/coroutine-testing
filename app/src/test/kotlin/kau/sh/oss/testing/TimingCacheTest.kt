/*
 * This source file was generated by the Gradle 'init' task
 */
package kau.sh.oss.testing

import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.UnconfinedTestDispatcher
import kotlinx.coroutines.test.advanceTimeBy
import kotlinx.coroutines.test.runTest
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Disabled
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.RegisterExtension
import kotlin.time.Duration.Companion.seconds

@OptIn(ExperimentalCoroutinesApi::class)
class TimingCacheTest {

  @RegisterExtension
  val testRule = CoroutineTestRule(UnconfinedTestDispatcher())

  @DisplayName("adding an item should immediately put it in the cache")
  @Test
  fun test1() = runTest {
    val cacher = Cache(
        // this = TestScope => test will never end
        backgroundScope,
    )
    cacher.put("A")
    assertThat(cacher.cache).containsExactly("A")
  }

  @DisplayName("after adding an item, in 5 seconds it should move from cache to extended cache")
  @Test
  fun test2() = runTest {
    val cacher = Cache(backgroundScope)
    cacher.put("C")
    assertThat(cacher.cache).contains("C")
    advanceTimeBy(6.seconds)
    assertThat(cacher.cache).doesNotContain("C")
    assertThat(cacher.extendedCache).contains("C")
  }

  @DisplayName("every 5 seconds, entire extended cache is cleared")
  @Test
  fun test3() = runTest {
    val cacher = Cache(backgroundScope)
    cacher.put("C")
    assertThat(cacher.cache).contains("C")
    advanceTimeBy(6.seconds)
    assertThat(cacher.extendedCache).contains("C")
    advanceTimeBy(6.seconds)
    assertThat(cacher.extendedCache).isEmpty()
  }

  @DisplayName("if extended cache already has 5 items, drop oldest item, when adding new item")
  @Test
  fun test4() = runTest {
    val cacher = Cache(backgroundScope)
    cacher.put("A")
    cacher.put("B")
    cacher.put("C")
    cacher.put("D")
    cacher.put("E")
    assertThat(cacher.cache.size).isEqualTo(5)

    cacher.put("F")
    assertThat(cacher.cache).contains("F", "E", "D", "C", "B")
    assertThat(cacher.extendedCache).contains("A")

    advanceTimeBy(6.seconds)
    assertThat(cacher.cache).isEmpty()
    assertThat(cacher.extendedCache).contains("F", "E", "D", "C", "B")
  }
}

