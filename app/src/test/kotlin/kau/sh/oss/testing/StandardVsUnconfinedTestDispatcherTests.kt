/*
 * This source file was generated by the Gradle 'init' task
 */
package kau.sh.oss.testing

import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.delay
import kotlinx.coroutines.job
import kotlinx.coroutines.launch
import kotlinx.coroutines.test.StandardTestDispatcher
import kotlinx.coroutines.test.UnconfinedTestDispatcher
import kotlinx.coroutines.test.advanceTimeBy
import kotlinx.coroutines.test.runCurrent
import kotlinx.coroutines.test.runTest
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Disabled
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.RegisterExtension
import kotlin.time.Duration.Companion.milliseconds
import kotlin.time.Duration.Companion.seconds

@OptIn(ExperimentalCoroutinesApi::class)
class StandardVsUnconfinedTestDispatcherTests {

  @DisplayName("test StandardTestDispatcher")
  @Test
  fun test1() = runTest(StandardTestDispatcher()) {
    var result = 0

    launch {
      delay(1.seconds)
      result = 9
      delay(1.seconds)
      result = 42
    }

    advanceTimeBy(1.seconds)
    runCurrent()
    assertThat(result).isEqualTo(9)

    advanceTimeBy(1.seconds)
    runCurrent()
    assertThat(result).isEqualTo(42)

  }

  @DisplayName("test UnconfinedTestDispatcher")
  @Test
  fun test2() = runTest(UnconfinedTestDispatcher()) {
    var result = 0

    val job = launch {
      delay(1.seconds)
      result = 42
      delay(1.seconds)
    }

    // the job is complete and therefore result is set
    // if you add advanceTimeBy(2.seconds), the test will confusingly pass
    // but this is not because time has been advanced in anyway
    // but rather because the job is finished

    assertThat(result)
        .isNotEqualTo(42)
        .isEqualTo(0)

    job.join()

    assertThat(result).isEqualTo(42)
  }

}

